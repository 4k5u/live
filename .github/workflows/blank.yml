# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'
#  repository_dispatch:
#    types: [trigger_workflow]
    
env:
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:  # 定义全局环境变量
      AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
      BOTTOKEN: ${{ secrets.BOTTOKEN }}
      SYNCTV: ${{ secrets.SYNCTV }}
      COOKIE: ${{ secrets.COOKIE }}
      USERTOKEN: ${{ secrets.USERTOKEN }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      M3U8SITE: ${{ secrets.M3U8SITE }}
      AFCOOKIE: ${{ secrets.AFCOOKIE }}
      PDAPI: ${{ secrets.PDAPI }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup WARP
        run: |
          echo "WARP mode: client warp+doh."
          sudo apt-get -y update
          curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
          sudo apt-get update
          sudo apt-get install -y cloudflare-warp
        shell: bash
      - name: Connect to WARP
        run: |

          # Registration step with 30-second timeout and retry
            for i in {1..3}; do
              echo "Attempt $i: registration new"
              if timeout 30 sudo warp-cli --accept-tos registration new; then
                break
              elif [ "$i" -eq 3 ]; then
                echo "Registration failed after 3 attempts."
                exit 1
              fi
              sleep 5
            done

            # Mode setup with 30-second timeout and retry
            for i in {1..3}; do
              echo "Attempt $i: mode warp+doh"
              if timeout 30 sudo warp-cli --accept-tos mode warp+doh; then
                break
              elif [ "$i" -eq 3 ]; then
                echo "Mode setting failed after 3 attempts."
                exit 1
              fi
              sleep 5
            done
          echo "WARP installation complete."
          
          #if [ "${{ inputs.stack }}" == 'ipv4' ]; then
          #  sudo warp-cli --accept-tos tunnel ip add-range ::0/0
          #elif [ "${{ inputs.stack }}" == 'ipv6' ]; then
          #  sudo warp-cli --accept-tos tunnel ip add-range 0.0.0.0/0
          #fi
          echo "connect"
          sudo warp-cli --accept-tos connect

          sleep 5
        shell: bash
      - name: check WARP
        run: |
          status=$(warp-cli --accept-tos status | grep -i "Status update" | awk '{print $3}')
          echo "$status"
          if [ "$status" != "Connected" ]; then
            echo "WARP is not connected. Reconnecting..."
            sudo warp-cli --accept-tos disconnect
            # 设置 WARP 模式为 warp+doh
            sudo warp-cli --accept-tos mode warp+doh
            # 尝试连接
            sudo warp-cli --accept-tos connect
            sleep 5
            # 检查连接是否成功
            new_status=$(warp-cli --accept-tos status | grep -i "Status update" | awk '{print $3}')
            echo "$new_status"
            if [ "$new_status" == "Connected" ]; then
                echo "WARP connected successfully."
            else
                echo "Failed to connect to WARP."
            fi
          else
            echo "WARP is already connected."
          fi
          echo "IPv4: $(sudo curl -s4m8 --retry 3 -A Mozilla https://api.ip.sb/geoip)"
          echo "IPv6: $(sudo curl -s6m8 --retry 3 -A Mozilla https://api.ip.sb/geoip)"
        shell: bash
      - name: check chaturbate
        run: |
          bash cb.sh
          #sudo warp-cli --accept-tos mode proxy
          sleep 3
      - name: check panda
        run: |
          bash pd.sh
          sleep 3
      - name: check afreecatv
        run: |
          bash af.sh
          sleep 3
      - name: check flextv
        run: |
          bash flex.sh
          sleep 3
      - name: check twitch
        run: |
          bash tw.sh
          sleep 3
      - name: check stripchat
        run: |
          bash st.sh
      - name: commit
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add .
          git commit -m "update" -a
      - name: Push changes
        id: push
        run: git push || echo "git push failed" > push_failed.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      - name: Check if push failed
        id: check_push_failed
        run: |
          if [ -f push_failed.txt ]; then
            echo "Push failed"
            echo "push_failed=true" >> $GITHUB_ENV
          else
            echo "Push succeeded"
            echo "push_failed=false" >> $GITHUB_ENV
          fi
      - name: Retry Push on Failure
        if: env.push_failed == 'true'
        run: |
          n=0
          until [ $n -ge 3 ]
          do
            git pull --rebase
            git push && break
            n=$((n+1))
            sleep 10
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
